use sakila;
#List the number of films per category.
select c.name AS category, COUNT(f.film_id) AS number_of_films 
from category c 
join film_category fc on c.category_id = fc.category_id 
join film f on fc.film_id = f.film_id 
group by c.name 
order by number_of_films desc; 

-- Retrieve the store ID, city, and country for each store.
select 
	s.store_id, ci.city, co.country
from store s 
join address a on s.address_id = a.address_id 
join city ci on a.city_id = ci.city_id 
join country co on ci.country_id = co.country_id;

-- -- Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, cit.city, co.country, SUM(p.amount) as total_revenue
FROM store s
JOIN address ad on ad.address_id = s.address_id
JOIN city cit on cit.city_id = ad.city_id
JOIN country co on co.country_id = cit.country_id
JOIN staff  ON s.store_id = staff.store_id
JOIN payment p ON p.staff_id = staff.staff_id
GROUP BY s.store_id, cit.city, co.country;

-- -- Determine the average running time of films for each category.

select c.name as category, AVG(f.length) as average_runtime
from category c 
join film_category fc on c.category_id = fc.category_id
join film f on fc.film_id = f.film_id 
group by c.name 
order by average_runtime desc; 


-- -- Bonus:

-- -- Identify the film categories with the longest average running time.
-- -- Display the top 10 most frequently rented movies in descending order.
-- -- Determine if "Academy Dinosaur" can be rented from Store 1.
-- -- Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not 